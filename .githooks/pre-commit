#!/bin/bash

# Pre-commit hook for zmq4 project
# Validates build tags and ensures CZMQ isolation

echo "Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any checks fail
FAILED=0

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $2"
    else
        echo -e "${RED}✗${NC} $2"
        FAILED=1
    fi
}

# Check 1: Verify CGO build constraints in CZMQ files
echo "Checking CGO build constraints..."
for file in cxx_zmq4_compat.go czmq4_test.go zmq4_czmq_integration_test.go zmq4_benchmark_czmq_test.go; do
    if [ -f "$file" ]; then
        if grep -q "//go:build cgo" "$file" && grep -q "// +build cgo" "$file"; then
            print_status 0 "$file has correct CGO constraints"
        else
            print_status 1 "$file missing CGO constraints"
            echo "  Fix: Add '//go:build cgo' and '// +build cgo' to $file"
        fi
    fi
done

# Check 2: Ensure no CZMQ imports in non-CGO files
echo "Checking for CZMQ imports in non-CGO files..."
for file in $(find . -name "*.go" -not -path "./.git/*" -not -path "./vendor/*"); do
    # Skip files with CGO build constraint
    if grep -q "//go:build cgo\|// +build cgo" "$file" 2>/dev/null; then
        continue
    fi
    
    # Check for czmq imports
    if grep -q "github.com/luxfi/czmq" "$file" 2>/dev/null; then
        print_status 1 "$file imports CZMQ without build tag"
        echo "  Fix: Add build tag or remove CZMQ import"
    fi
done

if [ $FAILED -eq 0 ]; then
    print_status 0 "No CZMQ imports in non-tagged files"
fi

# Check 3: Verify pure Go build works
echo "Testing pure Go build..."
if go build -o /tmp/zmq4_test . 2>/dev/null; then
    print_status 0 "Pure Go build successful"
    rm -f /tmp/zmq4_test
else
    print_status 1 "Pure Go build failed"
fi

# Check 4: Run go fmt
echo "Checking code formatting..."
UNFORMATTED=$(gofmt -l .)
if [ -z "$UNFORMATTED" ]; then
    print_status 0 "Code is properly formatted"
else
    print_status 1 "Code needs formatting"
    echo "  Files needing format:"
    echo "$UNFORMATTED" | sed 's/^/    /'
    echo "  Fix: Run 'go fmt ./...'"
fi

# Check 5: Run go mod tidy
echo "Checking go.mod..."
cp go.mod go.mod.backup
cp go.sum go.sum.backup 2>/dev/null || touch go.sum.backup
go mod tidy 2>/dev/null
if diff -q go.mod go.mod.backup >/dev/null && diff -q go.sum go.sum.backup >/dev/null; then
    print_status 0 "go.mod is tidy"
else
    print_status 1 "go.mod needs tidying"
    echo "  Fix: Run 'go mod tidy'"
fi
mv go.mod.backup go.mod
mv go.sum.backup go.sum 2>/dev/null || rm go.sum.backup

# Check 6: Verify test files exist
echo "Checking test coverage..."
if ls *_test.go >/dev/null 2>&1; then
    print_status 0 "Test files exist"
else
    print_status 1 "No test files found"
fi

# Summary
echo
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}Pre-commit checks failed!${NC}"
    echo "Please fix the issues above before committing."
    echo
    echo "To bypass this hook (not recommended), use:"
    echo "  git commit --no-verify"
    exit 1
fi